{"packages": {"11": {"height": 0.5, "id": "CAP-0201", "width": 0.3, "length": 0.6}, "9": {"height": 0.6, "id": "RES-2010", "width": 2.5, "length": 5.0}, "7": {"height": 0.55, "id": "RES-1210", "width": 2.2, "length": 3.2}, "6": {"height": 0.55, "id": "RES-1206", "width": 1.6, "length": 3.2}, "17": {"height": 1.0, "id": "LED-0603", "width": 0.85, "length": 1.55}, "2": {"height": 0.25, "id": "RES-0201", "width": 0.3, "length": 0.6}, "21": {"height": 1.2, "id": "SOT-23-6", "width": 2.6, "length": 3.1}, "19": {"height": 1.2, "id": "SOT-23", "width": 2.6, "length": 3.1}, "14": {"height": 1.0, "id": "CAP-0805", "width": 1.2, "length": 2.0}, "20": {"height": 1.2, "id": "SOT-23-5", "width": 2.6, "length": 3.1}, "5": {"height": 0.45, "id": "RES-0805", "width": 1.2, "length": 2.0}, "10": {"height": 0.6, "id": "RES-2512", "width": 3.2, "length": 6.3}, "12": {"height": 0.5, "id": "CAP-0402", "width": 0.5, "length": 1.0}, "13": {"height": 1.0, "id": "CAP-0603", "width": 0.85, "length": 1.55}, "4": {"height": 0.45, "id": "RES-0603", "width": 0.85, "length": 1.55}, "16": {"height": 1.0, "id": "CAP-1210", "width": 2.2, "length": 3.2}, "3": {"height": 0.35, "id": "RES-0402", "width": 0.5, "length": 1.0}, "15": {"height": 1.0, "id": "CAP-1206", "width": 1.6, "length": 3.2}, "8": {"height": 0.55, "id": "RES-1218", "width": 4.6, "length": 3.2}, "18": {"height": 1.7, "id": "SOD-80", "width": 1.7, "length": 3.7}, "1": {"height": 0.01, "id": "FID-1x3", "width": 3.0, "length": 3.0}}, "head": {"1": {"y_axis_id": "y", "cameras": [{"id": "Cam2", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n    \n    controllers[motion_controller_xy_id].move(position, feed_rate)\n\ndef get_position():\n    return {\n        'x' : 200,\n        'y' : 201,\n        'z' : 202,\n        'r' : 204\n    }\n", "offset": {"y": -20.0, "x": -21.9}}], "x_axis_id": "x", "motion_controller_xy_id": "Mc1", "placement_heads": [{"y_axis_id": "y", "r_axis_id": "a", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park pick n place axis before moving x or y\n    if 'x' in point or 'y' in point:\n        controllers[motion_controller_zr_id].move({ \n            z_axis_id: axis_zr_config[z_axis_id]['park']\n        }, feed_rate)\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n    \n    if position:\n        controllers[motion_controller_xy_id].move(position, feed_rate)\n\n    # raise/descent and rotate nozzle\n    position = {}\n    if 'z' in point:\n        position[z_axis_id] = point['z']\n    if 'r' in point:\n        position[r_axis_id] = point['r']\n    \n    if position:\n        controllers[motion_controller_zr_id].move(position, feed_rate)\n\ndef get_position():\n    position_xy = controllers[motion_controller_xy_id].position\n    if motion_controller_xy_id == motion_controller_zr_id:\n        position_zr = position_xy\n    else:\n        position_zr = controllers[motion_controller_zr_id].position\n\n    return {\n        'x' : position_xy[x_axis_id],\n        'y' : position_xy[y_axis_id],\n        'z' : position_zr[z_axis_id],\n        'r' : position_zr[r_axis_id]\n    }\n\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : z_axis_id,\n        'r' : r_axis_id\n    }\n\n    if axis == 'x' or axis == 'y':\n        controllers[motion_controller_xy_id].jog(axis_map[axis], step, feed_rate)\n    if axis == 'z' or axis == 'r':\n        controllers[motion_controller_zr_id].jog(axis_map[axis], step, feed_rate)\n\n\ndef park(axis_list, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    park_position = {}\n    # park z even if x, y parking is desired\n    if 'x' in axis_list or 'y' in axis_list or 'z' in axis_list:\n        park_position[z_axis_id] = axis_zr_config[z_axis_id]['park']\n    if 'r' in axis_list:\n        park_position[r_axis_id] = axis_zr_config[r_axis_id]['park']\n\n    if park_position:\n        controllers[motion_controller_zr_id].move(park_position, feed_rate)\n\n    # park x and y axis\n    park_position = {}\n    if 'x' in axis_list:\n        park_position[x_axis_id] = axis_xy_config[x_axis_id]['park']\n    if 'y' in axis_list:\n        park_position[y_axis_id] = axis_xy_config[y_axis_id]['park']\n    \n    if park_position:\n         controllers[motion_controller_xy_id].move(park_position, feed_rate)\n\n\ndef pick(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park'],\n    }, feed_rate)\n\n    # move to pick point on x and y axis and park rotation axis\n    point_xy = {\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }\n    \n    if motion_controller_xy_id == motion_controller_zr_id:\n        # also park raxis if z and r axis use same motion controller as x and y\n        point_xy[r_axis_id] = axis_zr_config[r_axis_id]['park']\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n    else:\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n        # rotate nozzle\n        controllers[motion_controller_zr_id].move({\n            r_axis_id: axis_zr_config[r_axis_id]['park']\n        }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: point['z']\n    }, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n\n\ndef place(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # move to place point on x and y axis\n    point_xy = {\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }\n    \n    if motion_controller_xy_id == motion_controller_zr_id:\n        # also rotate if z and r axis use same motion controller\n        point_xy[r_axis_id] = rotation\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n    else:\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n        # rotate nozzle\n        controllers[motion_controller_zr_id].move({\n            r_axis_id: rotation\n        }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: point['z']\n    }, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle, park rotation axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n", "motion_controller_xy_id": "Mc1", "id": "PlaceHead1", "motion_controller_zr_id": "Mc1", "offset": {"y": 0.0, "x": 0.0}, "z_axis_id": "z", "x_axis_id": "x", "vacuum_actuator_id": "Valve1"}, {"y_axis_id": "y", "r_axis_id": "b", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park pick n place axis before moving x or y\n    if 'x' in point or 'y' in point:\n        controllers[motion_controller_zr_id].move({ \n            z_axis_id: axis_zr_config[z_axis_id]['park']\n        }, feed_rate)\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n\n    if position:\n        controllers[motion_controller_xy_id].move(position, feed_rate)\n\n    # raise/descent and rotate nozzle\n    position = {}\n    if 'z' in point:\n        position[z_axis_id] = 118 - point['z']\n    if 'r' in point:\n        position[r_axis_id] = point['r']\n    \n    if position:\n        controllers[motion_controller_zr_id].move(position, feed_rate)\n\ndef get_position():\n    position_xy = controllers[motion_controller_xy_id].position\n    if motion_controller_xy_id == motion_controller_zr_id:\n        position_zr = position_xy\n    else:\n        position_zr = controllers[motion_controller_zr_id].position\n\n    return {\n        'x' : position_xy[x_axis_id],\n        'y' : position_xy[y_axis_id],\n        'z' : 118 - position_zr[z_axis_id],\n        'r' : position_zr[r_axis_id]\n    }\n\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : z_axis_id,\n        'r' : r_axis_id\n    }\n\n    if axis == 'z':\n        step = -step\n\n    if axis == 'x' or axis == 'y':\n        controllers[motion_controller_xy_id].jog(axis_map[axis], step, feed_rate)\n    if axis == 'z' or axis == 'r':\n        controllers[motion_controller_zr_id].jog(axis_map[axis], step, feed_rate)\n\ndef park(axis_list, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    park_position = {}\n    # park z even if x, y parking is desired\n    if 'x' in axis_list or 'y' in axis_list or 'z' in axis_list:\n        park_position[z_axis_id] = axis_zr_config[z_axis_id]['park']\n    if 'r' in axis_list:\n        park_position[r_axis_id] = axis_zr_config[r_axis_id]['park']\n\n    if park_position:\n        controllers[motion_controller_zr_id].move(park_position, feed_rate)\n\n    # park x and y axis\n    park_position = {}\n    if 'x' in axis_list:\n        park_position[x_axis_id] = axis_xy_config[x_axis_id]['park']\n    if 'y' in axis_list:\n        park_position[y_axis_id] = axis_xy_config[y_axis_id]['park']\n    \n    if park_position:\n         controllers[motion_controller_xy_id].move(park_position, feed_rate)\n         \n\ndef pick(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n\n    # move to pick point on x and y axis and park rotation axis\n    point_xy = {\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }\n    \n    if motion_controller_xy_id == motion_controller_zr_id:\n        # also park raxis if z and r axis use same motion controller as x and y\n        point_xy[r_axis_id] = axis_zr_config[r_axis_id]['park']\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n    else:\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n        # rotate nozzle\n        controllers[motion_controller_zr_id].move({\n            r_axis_id: axis_zr_config[r_axis_id]['park']\n        }, feed_rate)\n\n    # position z axis, lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: 118 - point['z']\n    }, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n\n\ndef place(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # move to place point on x and y axis\n    point_xy = {\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }\n    \n    if motion_controller_xy_id == motion_controller_zr_id:\n        # also rotate if z and r axis use same motion controller as x and y axis\n        point_xy[r_axis_id] = rotation\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n    else:\n        controllers[motion_controller_xy_id].move(point_xy, feed_rate)\n        # rotate nozzle\n        controllers[motion_controller_zr_id].move({\n            r_axis_id: rotation\n        }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: 118 - point['z']\n    }, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n", "motion_controller_xy_id": "Mc1", "id": "PlaceHead2", "motion_controller_zr_id": "Mc1", "offset": {"y": 0.2, "x": -43.9}, "z_axis_id": "z", "x_axis_id": "x", "vacuum_actuator_id": "Valve2"}]}}, "axis": {"3": {"acc": 1500, "id": "z", "feed_rate": 50000, "park": 59, "limit": 120}, "2": {"acc": 1500, "id": "y", "feed_rate": 50000, "park": 5, "limit": 400}, "5": {"acc": 1500, "id": "b", "feed_rate": 50000, "park": 0, "limit": 360}, "1": {"acc": 1500, "id": "x", "feed_rate": 50000, "park": 5, "limit": 450}, "4": {"acc": 1500, "id": "a", "feed_rate": 50000, "park": 0, "limit": 360}}, "actuators": {"3": {"id": "Valve2", "type": "ToggleActuator", "code": "\ndef set(value):\n    controllers['Mc1'].coolant_mist = value\n\ndef get():\n    controllers['Mc1'].coolant_mist\n", "initial_value": 0}, "2": {"id": "Valve1", "type": "ToggleActuator", "code": "\ndef set(value):\n    controllers['Mc1'].coolant_flood = value\n\ndef get():\n    controllers['Mc1'].coolant_flood\n", "initial_value": 0}, "1": {"id": "VacuumPump", "type": "ToggleActuator", "code": "\ndef set(value):\n    controllers['Mc1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['Mc1'].spindle_duty else 0\n", "initial_value": 0}}, "feeders": {"1": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"value": "5.6K 1%", "package": "RES-1206"}, "point": {"y": 132.9, "x": 224.6, "z": 27}, "id": "StripFeeder_1", "count": 47, "type": "StripFeeder", "size": 47}, "2": {"component": {"package": "RES-0603", "value": "18K 1%"}, "point": {"y": 144.9, "x": 225, "z": 27}, "id": "StripFeeder_2", "count": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "3": {"component": {"package": "RES-0603", "value": "24K 1%"}, "point": {"y": 156.8, "x": 224.9, "z": 27}, "id": "StripFeeder_3", "count": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "4": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"value": "47K 1%", "package": "RES-0603"}, "point": {"y": 168.7, "x": 225, "z": 27}, "id": "StripFeeder_4", "count": 47, "type": "StripFeeder", "size": 47}, "5": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "point": {"y": 180.7, "x": 225, "z": 27}, "id": "StripFeeder_5", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "12pF 50V 5%", "package": "CAP-0603"}}, "6": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "point": {"y": 192.8, "x": 225, "z": 27}, "id": "StripFeeder_6", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "10nF 50V 10%", "package": "CAP-0603"}}, "7": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"value": "100nF 10V 5%", "package": "CAP-0603"}, "point": {"y": 204.8, "x": 225, "z": 27}, "id": "StripFeeder_7", "count": 47, "type": "StripFeeder", "size": 47}, "8": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "point": {"y": 216.8, "x": 225, "z": 27}, "id": "StripFeeder_8", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "1uF 50V 5%", "package": "CAP-0603"}}, "9": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"value": "OSG50603C1E", "package": "LED-0603"}, "point": {"y": 135.2, "x": 252, "z": 27}, "id": "StripFeeder_9", "count": 47, "type": "StripFeeder", "size": 47}, "10": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"value": "BSS84", "package": "SOT-23"}, "point": {"y": 147.2, "x": 252, "z": 27}, "id": "StripFeeder_10", "count": 47, "type": "StripFeeder", "size": 47}, "11": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "point": {"y": 159.2, "x": 252, "z": 27}, "id": "StripFeeder_11", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "LL4148", "package": "SOD-80"}}, "12": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "point": {"y": 170.9, "x": 252, "z": 27}, "id": "StripFeeder_12", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "PDTC114ET", "package": "SOT-23"}}, "13": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"value": "0R 1%", "package": "RES-0603"}, "point": {"y": 183.2, "x": 252, "z": 27}, "id": "StripFeeder_13", "count": 47, "type": "StripFeeder", "size": 47}, "14": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "point": {"y": 195.2, "x": 252, "z": 27}, "id": "StripFeeder_14", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "150R 5%", "package": "RES-0603"}}, "15": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "point": {"y": 206.9, "x": 252, "z": 27}, "id": "StripFeeder_15", "count": 47, "size": 47, "type": "StripFeeder", "component": {"value": "680R 5%", "package": "RES-0603"}}, "16": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "point": {"y": 219, "x": 252, "z": 27}, "count": 47, "size": 47, "component": {"value": "10K 5%", "package": "RES-0603"}, "id": "StripFeeder_16", "type": "StripFeeder"}}, "_default": {}, "cameras": {"2": {"id": "Cam2", "description": "Down looking camera"}, "1": {"id": "Cam1", "description": "Up looking camera"}}, "controllers": {"2": {"id": "Io1", "driver": "raspihats.i2c_hats.DQ10rly", "adr": 80, "type": "input_output"}, "1": {"id": "Mc1", "driver": "grbl", "type": "motion", "port": {"baudrate": 115200, "stopbits": 1, "name": "/dev/ttyAMA0", "parity": "N", "bytesize": 8}}}}