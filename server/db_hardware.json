{"packages": {"15": {"width": 2.2, "height": 1.0, "id": "CAP-1210", "length": 3.2}, "18": {"width": 2.6, "height": 1.2, "id": "SOT-23", "length": 3.1}, "12": {"width": 0.85, "height": 1.0, "id": "CAP-0603", "length": 1.55}, "17": {"width": 1.7, "height": 1.7, "id": "SOD-80", "length": 3.7}, "3": {"width": 0.85, "height": 0.45, "id": "RES-0603", "length": 1.55}, "6": {"width": 2.2, "height": 0.55, "id": "RES-1210", "length": 3.2}, "10": {"width": 0.3, "height": 0.5, "id": "CAP-0201", "length": 0.6}, "1": {"width": 0.3, "height": 0.25, "id": "RES-0201", "length": 0.6}, "7": {"width": 4.6, "height": 0.55, "id": "RES-1218", "length": 3.2}, "4": {"width": 1.2, "height": 0.45, "id": "RES-0805", "length": 2.0}, "14": {"width": 1.6, "height": 1.0, "id": "CAP-1206", "length": 3.2}, "2": {"width": 0.5, "height": 0.35, "id": "RES-0402", "length": 1.0}, "5": {"width": 1.6, "height": 0.55, "id": "RES-1206", "length": 3.2}, "8": {"width": 2.5, "height": 0.6, "id": "RES-2010", "length": 5.0}, "16": {"width": 0.85, "height": 1.0, "id": "LED-0603", "length": 1.55}, "13": {"width": 1.2, "height": 1.0, "id": "CAP-0805", "length": 2.0}, "9": {"width": 3.2, "height": 0.6, "id": "RES-2512", "length": 6.3}, "11": {"width": 0.5, "height": 0.5, "id": "CAP-0402", "length": 1.0}}, "heads": {"1": {"id": "H1", "nozzle_carriages": [{"id": "NC1", "offset": {"y": 0.0, "x": 0.0}}, {"id": "NC2", "offset": {"y": 0.0, "x": -44.0}}], "cameras": [{"id": "C2", "offset": {"y": -20.0, "x": 22.5}}]}}, "nozzle_carriages": {"1": {"rotation_axis_id": "a", "id": "NC1", "pnp_axis_id": "z", "vacuum_actuator_id": "Valve1", "code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n"}, "2": {"rotation_axis_id": "b", "id": "NC2", "pnp_axis_id": "z", "vacuum_actuator_id": "Valve2", "code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n"}}, "feeders": {"1": {"point": {"y": 130.5, "x": 225.9, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_1", "count": 47, "component": {"package": "RES-1206", "value": "5.6K 1%"}, "type": "StripFeeder"}, "2": {"count": 5, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "point": {"y": 142.5, "x": 226.1, "z": 31}, "size": 47, "id": "StripFeeder_2", "component": {"package": "CAP-0603", "value": "10nF 50V 10%"}}, "3": {"point": {"y": 154.5, "x": 226.1, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_3", "count": 47, "component": {"package": "RES-0603", "value": "24K 1%"}, "type": "StripFeeder"}, "4": {"point": {"y": 166.6, "x": 225.8, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_4", "count": 47, "component": {"package": "RES-0603", "value": "18K 1%"}, "type": "StripFeeder"}, "5": {"point": {"y": 178.7, "x": 225.8, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_5", "count": 47, "component": {"package": "RES-0603", "value": "47K 1%"}, "type": "StripFeeder"}, "6": {"point": {"y": 190.7, "x": 225.6, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_6", "count": 47, "component": {"package": "CAP-0603", "value": "12pF 50V 5%"}, "type": "StripFeeder"}, "7": {"point": {"y": 202.8, "x": 225.6, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_7", "count": 47, "component": {"package": "CAP-0603", "value": "1uF 50V 5%"}, "type": "StripFeeder"}, "8": {"point": {"y": 214.8, "x": 225.7, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "id": "StripFeeder_8", "count": 47, "component": {"package": "CAP-0603", "value": "100nF 10V 5%"}, "type": "StripFeeder"}, "9": {"point": {"y": 133.2, "x": 252, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_9", "count": 47, "component": {"package": "SOT-23", "value": "BSS84"}, "type": "StripFeeder"}, "10": {"point": {"y": 146, "x": 347.4, "z": 31}, "size": 23, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_10", "count": 23, "component": {"package": "RES-0603", "value": "680R 5%"}, "type": "StripFeeder"}, "11": {"point": {"y": 158, "x": 347.5, "z": 31}, "size": 23, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_11", "count": 23, "component": {"package": "RES-0603", "value": "10K 1%"}, "type": "StripFeeder"}, "12": {"point": {"y": 169.4, "x": 251.8, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_12", "count": 47, "component": {"package": "LED-0603", "value": "OSG050603"}, "type": "StripFeeder"}, "13": {"point": {"y": 181.4, "x": 251.8, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_13", "count": 47, "component": {"package": "SOT-23", "value": "PDTC114ET"}, "type": "StripFeeder"}, "14": {"point": {"y": 194, "x": 347.3, "z": 31}, "size": 23, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_14", "count": 23, "component": {"package": "RES-0603", "value": "0R 1%"}, "type": "StripFeeder"}, "15": {"point": {"y": 206, "x": 347.3, "z": 31}, "size": 23, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_15", "count": 23, "component": {"package": "RES-0603", "value": "150R 5%"}, "type": "StripFeeder"}, "16": {"point": {"y": 217.4, "x": 251.6, "z": 31}, "size": 47, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "id": "StripFeeder_16", "count": 47, "component": {"package": "SOD-80", "value": "LL4148"}, "type": "StripFeeder"}}, "controllers": {"1": {"port": {"baudrate": 115200, "parity": "N", "name": "/dev/ttyAMA0", "stopbits": 1, "bytesize": 8}, "driver": "grbl", "id": "MC1", "type": "motion"}, "2": {"id": "IO1", "driver": "raspihats.i2c_hats.DQ10rly", "adr": 80, "type": "input_output"}}, "axis": {"1": {"limit": 450, "park": 5, "id": "x", "acc": 600, "feed_rate": 25000}, "4": {"limit": 360, "park": 0, "id": "a", "acc": 1000, "feed_rate": 50000}, "3": {"limit": 120, "park": 59, "id": "z", "acc": 600, "feed_rate": 25000}, "2": {"limit": 400, "park": 5, "id": "y", "acc": 600, "feed_rate": 25000}, "5": {"limit": 360, "park": 0, "id": "b", "acc": 1000, "feed_rate": 50000}}, "_default": {}, "actuators": {"1": {"id": "VacuumPump", "type": "ToggleActuator", "initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['MC1'].spindle_duty else 0\n"}, "3": {"id": "Valve2", "type": "ToggleActuator", "initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].coolant_mist = value\n\ndef get():\n    controllers['MC1'].coolant_mist\n"}, "2": {"id": "Valve1", "type": "ToggleActuator", "initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].coolant_flood = value\n\ndef get():\n    controllers['MC1'].coolant_flood\n"}}, "cameras": {"1": {"description": "Up looking camera", "id": "C1"}, "2": {"description": "Down looking camera", "id": "C2"}}}