{"axis": {"3": {"acc": 600, "feed_rate": 25000, "id": "z", "limit": 120, "park": 59}, "4": {"acc": 1000, "feed_rate": 50000, "id": "a", "limit": 360, "park": 0}, "2": {"acc": 600, "feed_rate": 25000, "id": "y", "limit": 400, "park": 5}, "1": {"acc": 600, "feed_rate": 25000, "id": "x", "limit": 450, "park": 5}, "5": {"acc": 1000, "feed_rate": 50000, "id": "b", "limit": 360, "park": 0}}, "cameras": {"2": {"description": "Down looking camera", "id": "C2"}, "1": {"description": "Up looking camera", "id": "C1"}}, "_default": {}, "heads": {"1": {"nozzle_carriages": [{"id": "NC1", "offset": {"x": 0.0, "y": 0.0}}, {"id": "NC2", "offset": {"x": -44.0, "y": 0.0}}], "cameras": [{"id": "C2", "offset": {"x": 22.5, "y": -20.0}}], "id": "H1"}}, "controllers": {"2": {"driver": "raspihats.i2c_hats.DQ10rly", "adr": 80, "type": "input_output", "id": "IO1"}, "1": {"driver": "grbl", "type": "motion", "port": {"name": "/dev/ttyAMA0", "baudrate": 115200, "parity": "N", "bytesize": 8, "stopbits": 1}, "id": "MC1"}}, "nozzle_carriages": {"2": {"code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n", "pnp_axis_id": "z", "rotation_axis_id": "b", "id": "NC2", "vacuum_actuator_id": "Valve2"}, "1": {"code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n", "pnp_axis_id": "z", "rotation_axis_id": "a", "id": "NC1", "vacuum_actuator_id": "Valve1"}}, "feeders": {"1": {"size": 47, "id": "StripFeeder_1", "component": {"value": "5.6K 1%", "package": "RES-1206"}, "point": {"x": 225.9, "z": 31, "y": 130.5}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "2": {"size": 47, "id": "StripFeeder_2", "point": {"x": 226.1, "z": 31, "y": 142.5}, "type": "StripFeeder", "component": {"value": "10nF 50V 10%", "package": "CAP-0603"}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 31}, "3": {"size": 47, "id": "StripFeeder_3", "component": {"value": "24K 1%", "package": "RES-0603"}, "point": {"x": 226.1, "z": 31, "y": 154.5}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "4": {"size": 47, "id": "StripFeeder_4", "component": {"value": "18K 1%", "package": "RES-0603"}, "point": {"x": 225.8, "z": 31, "y": 166.6}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "5": {"size": 47, "id": "StripFeeder_5", "component": {"value": "47K 1%", "package": "RES-0603"}, "point": {"x": 225.8, "z": 31, "y": 178.7}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "6": {"size": 47, "id": "StripFeeder_6", "component": {"value": "12pF 50V 5%", "package": "CAP-0603"}, "point": {"x": 225.6, "z": 31, "y": 190.7}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "7": {"size": 47, "id": "StripFeeder_7", "component": {"value": "1uF 50V 5%", "package": "CAP-0603"}, "point": {"x": 225.6, "z": 31, "y": 202.8}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "8": {"size": 47, "id": "StripFeeder_8", "component": {"value": "100nF 10V 5%", "package": "CAP-0603"}, "point": {"x": 225.7, "z": 31, "y": 214.8}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "9": {"size": 47, "id": "StripFeeder_9", "component": {"value": "BSS84", "package": "SOT-23"}, "point": {"x": 252, "z": 31, "y": 133.2}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "10": {"size": 23, "id": "StripFeeder_10", "component": {"value": "680R 5%", "package": "RES-0603"}, "point": {"x": 347.4, "z": 31, "y": 146}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "type": "StripFeeder"}, "11": {"size": 23, "id": "StripFeeder_11", "component": {"value": "10K 1%", "package": "RES-0603"}, "point": {"x": 347.5, "z": 31, "y": 158}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "type": "StripFeeder"}, "12": {"size": 47, "id": "StripFeeder_12", "component": {"value": "OSG050603", "package": "LED-0603"}, "point": {"x": 251.8, "z": 31, "y": 169.4}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "13": {"size": 47, "id": "StripFeeder_13", "component": {"value": "PDTC114ET", "package": "SOT-23"}, "point": {"x": 251.8, "z": 31, "y": 181.4}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}, "14": {"size": 23, "id": "StripFeeder_14", "component": {"value": "0R 1%", "package": "RES-0603"}, "point": {"x": 347.3, "z": 31, "y": 194}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "type": "StripFeeder"}, "15": {"size": 23, "id": "StripFeeder_15", "component": {"value": "150R 5%", "package": "RES-0603"}, "point": {"x": 347.3, "z": 31, "y": 206}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "type": "StripFeeder"}, "16": {"size": 47, "id": "StripFeeder_16", "component": {"value": "LL4148", "package": "SOD-80"}, "point": {"x": 251.6, "z": 31, "y": 217.4}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "type": "StripFeeder"}}, "actuators": {"3": {"initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].coolant_mist = value\n\ndef get():\n    controllers['MC1'].coolant_mist\n", "type": "ToggleActuator", "id": "Valve2"}, "2": {"initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].coolant_flood = value\n\ndef get():\n    controllers['MC1'].coolant_flood\n", "type": "ToggleActuator", "id": "Valve1"}, "1": {"initial_value": 0, "code": "\ndef set(value):\n    controllers['MC1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['MC1'].spindle_duty else 0\n", "type": "ToggleActuator", "id": "VacuumPump"}}, "packages": {"2": {"length": 1.0, "width": 0.5, "height": 0.35, "id": "RES-0402"}, "18": {"width": 2.6, "length": 3.1, "height": 1.2, "id": "SOT-23"}, "12": {"width": 0.85, "length": 1.55, "height": 1.0, "id": "CAP-0603"}, "15": {"width": 2.2, "length": 3.2, "height": 1.0, "id": "CAP-1210"}, "4": {"length": 2.0, "width": 1.2, "height": 0.45, "id": "RES-0805"}, "7": {"length": 3.2, "width": 4.6, "height": 0.55, "id": "RES-1218"}, "17": {"width": 1.7, "length": 3.7, "height": 1.7, "id": "SOD-80"}, "8": {"length": 5.0, "width": 2.5, "height": 0.6, "id": "RES-2010"}, "5": {"length": 3.2, "width": 1.6, "height": 0.55, "id": "RES-1206"}, "1": {"length": 0.6, "width": 0.3, "height": 0.25, "id": "RES-0201"}, "10": {"width": 0.3, "length": 0.6, "height": 0.5, "id": "CAP-0201"}, "9": {"length": 6.3, "width": 3.2, "height": 0.6, "id": "RES-2512"}, "6": {"length": 3.2, "width": 2.2, "height": 0.55, "id": "RES-1210"}, "3": {"length": 1.55, "width": 0.85, "height": 0.45, "id": "RES-0603"}, "16": {"length": 1.55, "width": 0.85, "height": 1.0, "id": "LED-0603"}, "14": {"width": 1.6, "length": 3.2, "height": 1.0, "id": "CAP-1206"}, "11": {"width": 0.5, "length": 1.0, "height": 0.5, "id": "CAP-0402"}, "13": {"width": 1.2, "length": 2.0, "height": 1.0, "id": "CAP-0805"}}}