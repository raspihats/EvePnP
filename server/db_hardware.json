{"nozzle_carriages": {"2": {"pnp_axis_id": "z", "vacuum_actuator_id": "Valve2", "rotation_axis_id": "b", "code": "\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "NC2"}, "1": {"pnp_axis_id": "z", "vacuum_actuator_id": "Valve1", "rotation_axis_id": "a", "code": "\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['MC1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "NC1"}}, "placement_heads": {"2": {"pnp_axis_id": "z", "vacuum_actuator_id": "Valve2", "rotation_axis_id": "b", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'], \n        'y': point['y'],\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: 118 - point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "PlaceHead2"}, "1": {"pnp_axis_id": "z", "vacuum_actuator_id": "Valve1", "rotation_axis_id": "a", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'], \n        'y': point['y'],\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "PlaceHead1"}}, "feeders": {"1": {"point": {"z": 31, "x": 225.6, "y": 130.5}, "count": 47, "component": {"package": "RES-1206", "value": "5.6K 1%"}, "id": "StripFeeder_1", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "2": {"point": {"z": 31, "x": 225.6, "y": 142.5}, "count": 47, "component": {"package": "CAP-0603", "value": "10nF 50V 10%"}, "id": "StripFeeder_2", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "3": {"point": {"z": 31, "x": 225.6, "y": 154.5}, "count": 47, "component": {"package": "RES-0603", "value": "24K 1%"}, "id": "StripFeeder_3", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "4": {"point": {"z": 31, "x": 225.6, "y": 166.6}, "count": 47, "component": {"package": "RES-0603", "value": "18K 1%"}, "id": "StripFeeder_4", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "5": {"point": {"z": 31, "x": 225.6, "y": 178.7}, "count": 47, "component": {"package": "RES-0603", "value": "47K 1%"}, "id": "StripFeeder_5", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "6": {"point": {"z": 31, "x": 225.6, "y": 190.7}, "count": 47, "component": {"package": "CAP-0603", "value": "12pF 50V 5%"}, "id": "StripFeeder_6", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "7": {"point": {"z": 31, "x": 225.6, "y": 202.8}, "count": 47, "component": {"package": "CAP-0603", "value": "1uF 50V 5%"}, "id": "StripFeeder_7", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "8": {"point": {"z": 31, "x": 225.6, "y": 214.8}, "count": 47, "component": {"package": "CAP-0603", "value": "100nF 10V 5%"}, "id": "StripFeeder_8", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "9": {"point": {"z": 31, "x": 252, "y": 133.2}, "count": 47, "component": {"package": "SOT-23", "value": "BSS84"}, "id": "StripFeeder_9", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "10": {"point": {"z": 31, "x": 347.4, "y": 146}, "count": 23, "component": {"package": "RES-0603", "value": "680R 5%"}, "id": "StripFeeder_10", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 23}, "11": {"point": {"z": 31, "x": 347.5, "y": 158}, "count": 23, "component": {"package": "RES-0603", "value": "10K 1%"}, "id": "StripFeeder_11", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 23}, "12": {"point": {"z": 31, "x": 251.8, "y": 169.4}, "count": 47, "component": {"package": "LED-0603", "value": "OSG50603C1E"}, "id": "StripFeeder_12", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "13": {"point": {"z": 31, "x": 251.8, "y": 181.4}, "count": 47, "component": {"package": "SOT-23", "value": "PDTC114ET"}, "id": "StripFeeder_13", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}, "14": {"point": {"z": 31, "x": 347.3, "y": 194}, "count": 23, "component": {"package": "RES-0603", "value": "0R 1%"}, "id": "StripFeeder_14", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 23}, "15": {"point": {"z": 31, "x": 347.3, "y": 206}, "count": 23, "component": {"package": "RES-0603", "value": "150R 5%"}, "id": "StripFeeder_15", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 23}, "16": {"point": {"z": 31, "x": 251.6, "y": 217.4}, "count": 47, "component": {"package": "SOD-80", "value": "LL4148"}, "id": "StripFeeder_16", "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "type": "StripFeeder", "size": 47}}, "controllers": {"1": {"id": "Mc1", "port": {"stopbits": 1, "parity": "N", "bytesize": 8, "name": "/dev/ttyAMA0", "baudrate": 115200}, "type": "motion", "driver": "grbl"}, "2": {"id": "Io1", "type": "input_output", "adr": 80, "driver": "raspihats.i2c_hats.DQ10rly"}}, "_default": {}, "packages": {"1": {"id": "FID-1x3", "height": 0.01, "width": 3.0, "length": 3.0}, "2": {"id": "RES-0201", "height": 0.25, "width": 0.3, "length": 0.6}, "3": {"id": "RES-0402", "height": 0.35, "width": 0.5, "length": 1.0}, "4": {"id": "RES-0603", "height": 0.45, "width": 0.85, "length": 1.55}, "5": {"id": "RES-0805", "height": 0.45, "width": 1.2, "length": 2.0}, "6": {"id": "RES-1206", "height": 0.55, "width": 1.6, "length": 3.2}, "7": {"id": "RES-1210", "height": 0.55, "width": 2.2, "length": 3.2}, "8": {"id": "RES-1218", "height": 0.55, "width": 4.6, "length": 3.2}, "9": {"id": "RES-2010", "height": 0.6, "width": 2.5, "length": 5.0}, "10": {"id": "RES-2512", "height": 0.6, "width": 3.2, "length": 6.3}, "11": {"id": "CAP-0201", "height": 0.5, "width": 0.3, "length": 0.6}, "12": {"id": "CAP-0402", "height": 0.5, "width": 0.5, "length": 1.0}, "13": {"id": "CAP-0603", "height": 1.0, "width": 0.85, "length": 1.55}, "14": {"id": "CAP-0805", "height": 1.0, "width": 1.2, "length": 2.0}, "15": {"id": "CAP-1206", "height": 1.0, "width": 1.6, "length": 3.2}, "16": {"id": "CAP-1210", "height": 1.0, "width": 2.2, "length": 3.2}, "17": {"id": "LED-0603", "height": 1.0, "width": 0.85, "length": 1.55}, "18": {"id": "SOD-80", "height": 1.7, "width": 1.7, "length": 3.7}, "19": {"id": "SOT-23", "height": 1.2, "width": 2.6, "length": 3.1}, "20": {"id": "SOT-23-5", "height": 1.2, "width": 2.6, "length": 3.1}, "21": {"id": "SOT-23-6", "height": 1.2, "width": 2.6, "length": 3.1}}, "actuators": {"1": {"id": "VacuumPump", "initial_value": 0, "code": "\ndef set(value):\n    controllers['Mc1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['Mc1'].spindle_duty else 0\n", "type": "ToggleActuator"}, "2": {"id": "Valve1", "initial_value": 0, "code": "\ndef set(value):\n    controllers['Mc1'].coolant_flood = value\n\ndef get():\n    controllers['Mc1'].coolant_flood\n", "type": "ToggleActuator"}, "3": {"id": "Valve2", "initial_value": 0, "code": "\ndef set(value):\n    controllers['Mc1'].coolant_mist = value\n\ndef get():\n    controllers['Mc1'].coolant_mist\n", "type": "ToggleActuator"}}, "cameras": {"1": {"description": "Up looking camera", "id": "Cam1"}, "2": {"description": "Down looking camera", "id": "Cam2"}}, "heads": {"1": {"x_axis_id": "x", "placement_heads": [{"offset": {"x": 0.0, "y": 0.0}, "pnp_axis_id": "z", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'] + offset['x'], \n        'y': point['y'] + offset['y']\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef get_position():\n    point = {\n        'x' : 100,\n        'y' : 101,\n        'z' : 102,\n    }\n    rotation = 104\n\n    return point, rotation\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "PlaceHead1", "rotation_axis_id": "a", "motion_controller_id": "Mc1", "vacuum_actuator_id": "Valve1"}, {"offset": {"x": -43.8, "y": 0.0}, "pnp_axis_id": "z", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers[motion_controller_id].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers[motion_controller_id].move({\n        'x': point['x'] + offset['x'], \n        'y': point['y'] + offset['y']\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers[motion_controller_id].move({\n        pnp_axis_id: 118 - point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "id": "PlaceHead2", "rotation_axis_id": "b", "motion_controller_id": "Mc1", "vacuum_actuator_id": "Valve2"}], "y_axis_id": "y", "id": "Head1", "cameras": [{"id": "Cam2", "offset": {"x": -21.9, "y": -20.0}}], "motion_controller_id": "Mc1"}}, "axis": {"1": {"park": 5, "acc": 1500, "id": "x", "limit": 450, "feed_rate": 50000}, "2": {"park": 5, "acc": 1500, "id": "y", "limit": 400, "feed_rate": 50000}, "3": {"park": 59, "acc": 1500, "id": "z", "limit": 120, "feed_rate": 50000}, "4": {"park": 0, "acc": 1500, "id": "a", "limit": 360, "feed_rate": 50000}, "5": {"park": 0, "acc": 1500, "id": "b", "limit": 360, "feed_rate": 50000}}}