{"packages": {"1": {"id": "FID-1x3", "width": 3.0, "length": 3.0, "height": 0.01}, "2": {"id": "RES-0201", "width": 0.3, "length": 0.6, "height": 0.25}, "3": {"id": "RES-0402", "width": 0.5, "length": 1.0, "height": 0.35}, "4": {"id": "RES-0603", "width": 0.85, "length": 1.55, "height": 0.45}, "5": {"id": "RES-0805", "width": 1.2, "length": 2.0, "height": 0.45}, "6": {"id": "RES-1206", "width": 1.6, "length": 3.2, "height": 0.55}, "7": {"id": "RES-1210", "width": 2.2, "length": 3.2, "height": 0.55}, "8": {"id": "RES-1218", "width": 4.6, "length": 3.2, "height": 0.55}, "9": {"id": "RES-2010", "width": 2.5, "length": 5.0, "height": 0.6}, "10": {"id": "RES-2512", "width": 3.2, "length": 6.3, "height": 0.6}, "11": {"id": "CAP-0201", "width": 0.3, "length": 0.6, "height": 0.5}, "12": {"id": "CAP-0402", "width": 0.5, "length": 1.0, "height": 0.5}, "13": {"id": "CAP-0603", "width": 0.85, "length": 1.55, "height": 1.0}, "14": {"id": "CAP-0805", "width": 1.2, "length": 2.0, "height": 1.0}, "15": {"id": "CAP-1206", "width": 1.6, "length": 3.2, "height": 1.0}, "16": {"id": "CAP-1210", "width": 2.2, "length": 3.2, "height": 1.0}, "17": {"id": "LED-0603", "width": 0.85, "length": 1.55, "height": 1.0}, "18": {"id": "SOD-80", "width": 1.7, "length": 3.7, "height": 1.7}, "19": {"id": "SOT-23", "width": 2.6, "length": 3.1, "height": 1.2}, "20": {"id": "SOT-23-5", "width": 2.6, "length": 3.1, "height": 1.2}, "21": {"id": "SOT-23-6", "width": 2.6, "length": 3.1, "height": 1.2}}, "placement_heads": {"1": {"rotation_axis_id": "a", "id": "PlaceHead1", "vacuum_actuator_id": "Valve1", "pnp_axis_id": "z", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'], \n        'y': point['y'],\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n"}, "2": {"rotation_axis_id": "b", "id": "PlaceHead2", "vacuum_actuator_id": "Valve2", "pnp_axis_id": "z", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'], \n        'y': point['y'],\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: 118 - point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n"}}, "actuators": {"1": {"id": "VacuumPump", "code": "\ndef set(value):\n    controllers['Mc1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['Mc1'].spindle_duty else 0\n", "type": "ToggleActuator", "initial_value": 0}, "2": {"id": "Valve1", "code": "\ndef set(value):\n    controllers['Mc1'].coolant_flood = value\n\ndef get():\n    controllers['Mc1'].coolant_flood\n", "type": "ToggleActuator", "initial_value": 0}, "3": {"id": "Valve2", "code": "\ndef set(value):\n    controllers['Mc1'].coolant_mist = value\n\ndef get():\n    controllers['Mc1'].coolant_mist\n", "type": "ToggleActuator", "initial_value": 0}}, "axis": {"1": {"id": "x", "park": 5, "limit": 450, "feed_rate": 50000, "acc": 1500}, "2": {"id": "y", "park": 5, "limit": 400, "feed_rate": 50000, "acc": 1500}, "3": {"id": "z", "park": 59, "limit": 120, "feed_rate": 50000, "acc": 1500}, "4": {"id": "a", "park": 0, "limit": 360, "feed_rate": 50000, "acc": 1500}, "5": {"id": "b", "park": 0, "limit": 360, "feed_rate": 50000, "acc": 1500}}, "cameras": {"1": {"id": "Cam1", "description": "Up looking camera"}, "2": {"id": "Cam2", "description": "Down looking camera"}}, "controllers": {"1": {"id": "Mc1", "driver": "grbl", "port": {"stopbits": 1, "parity": "N", "baudrate": 115200, "bytesize": 8, "name": "/dev/ttyAMA0"}, "type": "motion"}, "2": {"id": "Io1", "driver": "raspihats.i2c_hats.DQ10rly", "type": "input_output", "adr": 80}}, "head": {"1": {"x_axis_id": "x", "motion_controller_xy_id": "Mc1", "y_axis_id": "y", "placement_heads": [{"id": "PlaceHead1", "z_axis_id": "z", "motion_controller_zr_id": "Mc1", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park pick n place axis before moving x or y\n    if 'x' in point or 'y' in point:\n        controllers[motion_controller_zr_id].move({ \n            z_axis_id: axis_zr_config[z_axis_id]['park']\n        }, feed_rate)\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n    \n    if position:\n        controllers[motion_controller_xy_id].move(position, feed_rate)\n\n    # raise/descent and rotate nozzle\n    position = {}\n    if 'z' in point:\n        position[z_axis_id] = point['z']\n    if 'r' in point:\n        position[r_axis_id] = point['r']\n    \n    if position:\n        controllers[motion_controller_zr_id].move(position, feed_rate)\n\ndef get_position():\n    return {\n        'x' : 100,\n        'y' : 101,\n        'z' : 102,\n        'r' : 104\n    }\n\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : z_axis_id,\n        'r' : r_axis_id\n    }\n\n    if axis == 'x' or axis == 'y':\n        controllers[motion_controller_xy_id].jog(axis_map[axis], step, feed_rate)\n    if axis == 'z' or axis == 'r':\n        controllers[motion_controller_zr_id].jog(axis_map[axis], step, feed_rate)\n\n\ndef park(axis_list, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    park_position = {}\n    # park z even if x, y parking is desired\n    if 'x' in axis_list or 'y' in axis_list or 'z' in axis_list:\n        park_position[z_axis_id] = axis_zr_config[z_axis_id]['park']\n    if 'r' in axis_list:\n        park_position[r_axis_id] = axis_zr_config[r_axis_id]['park']\n\n    if park_position:\n        controllers[motion_controller_zr_id].move(park_position, feed_rate)\n\n    # park x and y axis\n    park_position = {}\n    if 'x' in axis_list:\n        park_position[x_axis_id] = axis_xy_config[x_axis_id]['park']\n    if 'y' in axis_list:\n        park_position[y_axis_id] = axis_xy_config[y_axis_id]['park']\n    \n    if park_position:\n         controllers[motion_controller_xy_id].move(park_position, feed_rate)\n\n\ndef pick(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park'],\n        r_axis_id: axis_zr_config[r_axis_id]['park']\n    }, feed_rate)\n\n    # move to pick point on x and y axis\n    controllers[motion_controller_xy_id].move({\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: point['z']\n    }, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n\n\ndef place(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # move to place point on x and y axis\n    controllers[motion_controller_xy_id].move({\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }, feed_rate)\n\n    # rotate nozzle\n    controllers[motion_controller_zr_id].move({\n        r_axis_id: rotation\n    }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: point['z']\n    }, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle, park rotation axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park'],\n        r_axis_id: axis_zr_config[r_axis_id]['park']\n    }, feed_rate)\n", "r_axis_id": "a", "offset": {"x": 0.0, "y": 0.0}, "vacuum_actuator_id": "Valve1"}, {"id": "PlaceHead2", "z_axis_id": "z", "motion_controller_zr_id": "Mc1", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park pick n place axis before moving x or y\n    if 'x' in point or 'y' in point:\n        controllers[motion_controller_zr_id].move({ \n            z_axis_id: axis_zr_config[z_axis_id]['park']\n        }, feed_rate)\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n\n    if position:\n        controllers[motion_controller_xy_id].move(position, feed_rate)\n\n    # raise/descent and rotate nozzle\n    position = {}\n    if 'z' in point:\n        position[z_axis_id] = 118 - point['z']\n    if 'r' in point:\n        position[r_axis_id] = point['r']\n    \n    if position:\n        controllers[motion_controller_zr_id].move(position, feed_rate)\n\ndef get_position():\n    return {\n        'x' : 200,\n        'y' : 201,\n        'z' : 202,\n        'r' : 204\n    }\n\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : z_axis_id,\n        'r' : r_axis_id\n    }\n\n    if axis == 'z':\n        step = -step\n\n    if axis == 'x' or axis == 'y':\n        controllers[motion_controller_xy_id].jog(axis_map[axis], step, feed_rate)\n    if axis == 'z' or axis == 'r':\n        controllers[motion_controller_zr_id].jog(axis_map[axis], step, feed_rate)\n\ndef park(axis_list, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    park_position = {}\n    # park z even if x, y parking is desired\n    if 'x' in axis_list or 'y' in axis_list or 'z' in axis_list:\n        park_position[z_axis_id] = axis_zr_config[z_axis_id]['park']\n    if 'r' in axis_list:\n        park_position[r_axis_id] = axis_zr_config[r_axis_id]['park']\n\n    if park_position:\n        controllers[motion_controller_zr_id].move(park_position, feed_rate)\n\n    # park x and y axis\n    park_position = {}\n    if 'x' in axis_list:\n        park_position[x_axis_id] = axis_xy_config[x_axis_id]['park']\n    if 'y' in axis_list:\n        park_position[y_axis_id] = axis_xy_config[y_axis_id]['park']\n    \n    if park_position:\n         controllers[motion_controller_xy_id].move(park_position, feed_rate)\n         \n\ndef pick(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # park z and r axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park'],\n        r_axis_id: axis_zr_config[r_axis_id]['park']\n    }, feed_rate)\n\n    # move to pick\n    # position x and y axis\n    controllers[motion_controller_xy_id].move({\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }, feed_rate)\n\n    # position z axis, lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: 118 - point['z']\n    }, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park']\n    }, feed_rate)\n\n\ndef place(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_zr_config = controllers[motion_controller_zr_id].config['axis']\n\n    # move to place point on x and y axis\n    controllers[motion_controller_xy_id].move({\n        x_axis_id: point['x'], \n        y_axis_id: point['y']\n    }, feed_rate)\n\n    # rotate nozzle\n    controllers[motion_controller_zr_id].move({\n        r_axis_id: rotation\n    }, feed_rate)\n\n    # lower nozzle\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: 118 - point['z']\n    }, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle, park rotation axis\n    controllers[motion_controller_zr_id].move({\n        z_axis_id: axis_zr_config[z_axis_id]['park'],\n        r_axis_id: axis_zr_config[r_axis_id]['park']\n    }, feed_rate)\n", "r_axis_id": "b", "offset": {"x": -43.8, "y": 0.0}, "vacuum_actuator_id": "Valve2"}], "cameras": [{"id": "Cam2", "code": "\ndef move(point, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n    axis_xy_config = controllers[motion_controller_xy_id].config['axis']\n\n    # move x,y\n    position = {}\n    if 'x' in point:\n        position[x_axis_id] = point['x'] + offset['x']\n    if 'y' in point:\n        position[y_axis_id] = point['y'] + offset['y']\n    \n    controllers[motion_controller_xy_id].move(position, feed_rate)\n\ndef get_position():\n    return {\n        'x' : 200,\n        'y' : 201,\n        'z' : 202,\n        'r' : 204\n    }\n", "offset": {"x": -21.9, "y": -20.0}}]}}, "_default": {}, "feeders": {"1": {"id": "StripFeeder_1", "point": {"x": 225.6, "y": 130.5, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "RES-1206", "value": "5.6K 1%"}, "size": 47, "type": "StripFeeder", "count": 47}, "2": {"id": "StripFeeder_2", "point": {"x": 225.6, "y": 142.5, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "CAP-0603", "value": "10nF 50V 10%"}, "size": 47, "type": "StripFeeder", "count": 47}, "3": {"id": "StripFeeder_3", "point": {"x": 225.6, "y": 154.5, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "24K 1%"}, "size": 47, "type": "StripFeeder", "count": 47}, "4": {"id": "StripFeeder_4", "point": {"x": 225.6, "y": 166.6, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "18K 1%"}, "size": 47, "type": "StripFeeder", "count": 47}, "5": {"id": "StripFeeder_5", "point": {"x": 225.6, "y": 178.7, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "47K 1%"}, "size": 47, "type": "StripFeeder", "count": 47}, "6": {"id": "StripFeeder_6", "point": {"x": 225.6, "y": 190.7, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "CAP-0603", "value": "12pF 50V 5%"}, "size": 47, "type": "StripFeeder", "count": 47}, "7": {"id": "StripFeeder_7", "point": {"x": 225.6, "y": 202.8, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "CAP-0603", "value": "1uF 50V 5%"}, "size": 47, "type": "StripFeeder", "count": 47}, "8": {"id": "StripFeeder_8", "point": {"x": 225.6, "y": 214.8, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "component": {"package": "CAP-0603", "value": "100nF 10V 5%"}, "size": 47, "type": "StripFeeder", "count": 47}, "9": {"id": "StripFeeder_9", "point": {"x": 252, "y": 133.2, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "SOT-23", "value": "BSS84"}, "size": 47, "type": "StripFeeder", "count": 47}, "10": {"id": "StripFeeder_10", "point": {"x": 347.4, "y": 146, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "680R 5%"}, "size": 23, "type": "StripFeeder", "count": 23}, "11": {"id": "StripFeeder_11", "point": {"x": 347.5, "y": 158, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "10K 1%"}, "size": 23, "type": "StripFeeder", "count": 23}, "12": {"id": "StripFeeder_12", "point": {"x": 251.8, "y": 169.4, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "LED-0603", "value": "OSG50603C1E"}, "size": 47, "type": "StripFeeder", "count": 47}, "13": {"id": "StripFeeder_13", "point": {"x": 251.8, "y": 181.4, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "SOT-23", "value": "PDTC114ET"}, "size": 47, "type": "StripFeeder", "count": 47}, "14": {"id": "StripFeeder_14", "point": {"x": 347.3, "y": 194, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "0R 1%"}, "size": 23, "type": "StripFeeder", "count": 23}, "15": {"id": "StripFeeder_15", "point": {"x": 347.3, "y": 206, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "RES-0603", "value": "150R 5%"}, "size": 23, "type": "StripFeeder", "count": 23}, "16": {"id": "StripFeeder_16", "point": {"x": 251.6, "y": 217.4, "z": 31}, "code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "component": {"package": "SOD-80", "value": "LL4148"}, "size": 47, "type": "StripFeeder", "count": 47}}, "heads": {"1": {"id": "Head1", "y_axis_id": "y", "placement_heads": [{"rotation_axis_id": "a", "id": "PlaceHead1", "pnp_axis_id": "z", "code": "\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers['Mc1'].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers['Mc1'].move({\n        'x': point['x'] + offset['x'], \n        'y': point['y'] + offset['y']\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers['Mc1'].move({\n        pnp_axis_id: point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    x_axis_id = 'x'\n    y_axis_id = 'y'\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : pnp_axis_id,\n        'r' : rotation_axis_id\n    }\n\n    controllers[motion_controller_id].jog(axis_map[axis], step, feed_rate)\n\ndef get_position():\n    point = {\n        'x' : 100,\n        'y' : 101,\n        'z' : 102,\n    }\n    rotation = 104\n\n    return point, rotation\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "offset": {"x": 0.0, "y": 0.0}, "vacuum_actuator_id": "Valve1", "motion_controller_id": "Mc1"}, {"rotation_axis_id": "b", "id": "PlaceHead2", "pnp_axis_id": "z", "code": "\ndef jog(axis, step, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    x_axis_id = 'x'\n    y_axis_id = 'y'\n    axis_map = {\n        'x' : x_axis_id,\n        'y' : y_axis_id,\n        'z' : pnp_axis_id,\n        'r' : rotation_axis_id\n    }\n\n    if axis == 'z':\n        step = -step\n\n    controllers[motion_controller_id].jog(axis_map[axis], step, feed_rate)\n\ndef move(point, rotation, speed_factor=1):\n    feed_rate = 50000 * speed_factor\n\n    # park pick n place axis before doing anything\n    controllers[motion_controller_id].move({ \n        pnp_axis_id: axis[pnp_axis_id].park\n    }, feed_rate)\n\n    # move to planar point\n    controllers[motion_controller_id].move({\n        'x': point['x'] + offset['x'], \n        'y': point['y'] + offset['y']\n    }, feed_rate)\n\n    # raise/descent and rotate nozzle\n    controllers[motion_controller_id].move({\n        pnp_axis_id: 118 - point['z'],\n        rotation_axis_id: rotation\n    }, feed_rate)\n\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['Mc1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['Mc1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['Mc1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['Mc1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n", "offset": {"x": -43.8, "y": 0.0}, "vacuum_actuator_id": "Valve2", "motion_controller_id": "Mc1"}], "cameras": [{"id": "Cam2", "offset": {"x": -21.9, "y": -20.0}}], "x_axis_id": "x", "motion_controller_id": "Mc1"}}, "nozzle_carriages": {"1": {"rotation_axis_id": "a", "id": "NC1", "vacuum_actuator_id": "Valve1", "pnp_axis_id": "z", "code": "\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['MC1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n"}, "2": {"rotation_axis_id": "b", "id": "NC2", "vacuum_actuator_id": "Valve2", "pnp_axis_id": "z", "code": "\ndef pick(point):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, feed_rate)\n\n    # move to pick point\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n\n\ndef place(point, rotation, package):\n    feed_rate = 50000\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, feed_rate)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, feed_rate)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, feed_rate)\n"}}}