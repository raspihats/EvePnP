{"heads": {"1": {"nozzle_carriages": [{"offset": {"y": 0.0, "x": 0.0}, "id": "NC1"}, {"offset": {"y": 0.0, "x": -43.8}, "id": "NC2"}], "cameras": [{"offset": {"y": -20.0, "x": -21.9}, "id": "C2"}], "id": "H1"}}, "axis": {"1": {"feed_rate": 25000, "limit": 450, "acc": 600, "id": "x", "park": 5}, "2": {"feed_rate": 25000, "limit": 400, "acc": 600, "id": "y", "park": 5}, "3": {"feed_rate": 25000, "limit": 120, "acc": 600, "id": "z", "park": 59}, "4": {"feed_rate": 50000, "limit": 360, "acc": 1000, "id": "a", "park": 0}, "5": {"feed_rate": 50000, "limit": 360, "acc": 1000, "id": "b", "park": 0}}, "cameras": {"1": {"description": "Up looking camera", "id": "C1"}, "2": {"description": "Down looking camera", "id": "C2"}}, "actuators": {"1": {"code": "\ndef set(value):\n    controllers['MC1'].spindle_duty = value * 100\n\ndef get():\n    return 1 if controllers['MC1'].spindle_duty else 0\n", "initial_value": 0, "type": "ToggleActuator", "id": "VacuumPump"}, "2": {"code": "\ndef set(value):\n    controllers['MC1'].coolant_flood = value\n\ndef get():\n    controllers['MC1'].coolant_flood\n", "initial_value": 0, "type": "ToggleActuator", "id": "Valve1"}, "3": {"code": "\ndef set(value):\n    controllers['MC1'].coolant_mist = value\n\ndef get():\n    controllers['MC1'].coolant_mist\n", "initial_value": 0, "type": "ToggleActuator", "id": "Valve2"}}, "controllers": {"1": {"port": {"name": "/dev/ttyAMA0", "stopbits": 1, "bytesize": 8, "baudrate": 115200, "parity": "N"}, "driver": "grbl", "type": "motion", "id": "MC1"}, "2": {"adr": 80, "driver": "raspihats.i2c_hats.DQ10rly", "type": "input_output", "id": "IO1"}}, "_default": {}, "nozzle_carriages": {"1": {"vacuum_actuator_id": "Valve1", "pnp_axis_id": "z", "rotation_axis_id": "a", "code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move({\n        'x': x_position, \n        'y': y_position,\n        rotation_axis_id: 0\n    }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = point.pop('z') + package.height\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n", "id": "NC1"}, "2": {"vacuum_actuator_id": "Valve2", "pnp_axis_id": "z", "rotation_axis_id": "b", "code": "\ndef pick(point):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - point.pop('z')\n\n    # park pick n place axis\n    controllers['MC1'].move(\n        {\n            pnp_axis_id: axis[pnp_axis_id].park\n        }, 25000)\n\n    # move to pick point\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: 0\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # enable vacuum\n    actuators[vacuum_actuator_id].set(True)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n\n\ndef place(point, rotation, package):\n    x_position = point.pop('x')\n    y_position = point.pop('y')\n    z_position = 118 - (point.pop('z') + package.height)\n\n    # move to pick point and rotate\n    controllers['MC1'].move(\n        {\n            'x': x_position,\n            'y': y_position,\n            rotation_axis_id: rotation\n        }, 25000)\n\n    # descent nozzle\n    controllers['MC1'].move({pnp_axis_id: z_position}, 25000)\n\n    # disable vacuum\n    actuators[vacuum_actuator_id].set(False)\n\n    # raise nozzle\n    controllers['MC1'].move({pnp_axis_id: axis[pnp_axis_id].park}, 25000)\n", "id": "NC2"}}, "packages": {"1": {"height": 0.01, "length": 3.0, "width": 3.0, "id": "FID-1x3"}, "2": {"height": 0.25, "length": 0.6, "width": 0.3, "id": "RES-0201"}, "3": {"height": 0.35, "length": 1.0, "width": 0.5, "id": "RES-0402"}, "4": {"height": 0.45, "length": 1.55, "width": 0.85, "id": "RES-0603"}, "5": {"height": 0.45, "length": 2.0, "width": 1.2, "id": "RES-0805"}, "6": {"height": 0.55, "length": 3.2, "width": 1.6, "id": "RES-1206"}, "7": {"height": 0.55, "length": 3.2, "width": 2.2, "id": "RES-1210"}, "8": {"height": 0.55, "length": 3.2, "width": 4.6, "id": "RES-1218"}, "9": {"height": 0.6, "length": 5.0, "width": 2.5, "id": "RES-2010"}, "10": {"height": 0.6, "length": 6.3, "width": 3.2, "id": "RES-2512"}, "11": {"height": 0.5, "length": 0.6, "width": 0.3, "id": "CAP-0201"}, "12": {"height": 0.5, "length": 1.0, "width": 0.5, "id": "CAP-0402"}, "13": {"height": 1.0, "length": 1.55, "width": 0.85, "id": "CAP-0603"}, "14": {"height": 1.0, "length": 2.0, "width": 1.2, "id": "CAP-0805"}, "15": {"height": 1.0, "length": 3.2, "width": 1.6, "id": "CAP-1206"}, "16": {"height": 1.0, "length": 3.2, "width": 2.2, "id": "CAP-1210"}, "17": {"height": 1.0, "length": 1.55, "width": 0.85, "id": "LED-0603"}, "18": {"height": 1.7, "length": 3.7, "width": 1.7, "id": "SOD-80"}, "19": {"height": 1.2, "length": 3.1, "width": 2.6, "id": "SOT-23"}, "20": {"height": 1.2, "length": 3.1, "width": 2.6, "id": "SOT-23-5"}, "21": {"height": 1.2, "length": 3.1, "width": 2.6, "id": "SOT-23-6"}}, "feeders": {"1": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "RES-1206", "value": "5.6K 1%"}, "size": 47, "id": "StripFeeder_1", "point": {"y": 130.5, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "2": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "CAP-0603", "value": "10nF 50V 10%"}, "size": 47, "id": "StripFeeder_2", "point": {"y": 142.5, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "3": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "RES-0603", "value": "24K 1%"}, "size": 47, "id": "StripFeeder_3", "point": {"y": 154.5, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "4": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "RES-0603", "value": "18K 1%"}, "size": 47, "id": "StripFeeder_4", "point": {"y": 166.6, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "5": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "RES-0603", "value": "47K 1%"}, "size": 47, "id": "StripFeeder_5", "point": {"y": 178.7, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "6": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "CAP-0603", "value": "12pF 50V 5%"}, "size": 47, "id": "StripFeeder_6", "point": {"y": 190.7, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "7": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "CAP-0603", "value": "1uF 50V 5%"}, "size": 47, "id": "StripFeeder_7", "point": {"y": 202.8, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "8": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] -= (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "CAP-0603", "value": "100nF 10V 5%"}, "size": 47, "id": "StripFeeder_8", "point": {"y": 214.8, "x": 225.6, "z": 31}, "type": "StripFeeder"}, "9": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "SOT-23", "value": "BSS84"}, "size": 47, "id": "StripFeeder_9", "point": {"y": 133.2, "x": 252, "z": 31}, "type": "StripFeeder"}, "10": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "component": {"package": "RES-0603", "value": "680R 5%"}, "size": 23, "id": "StripFeeder_10", "point": {"y": 146, "x": 347.4, "z": 31}, "type": "StripFeeder"}, "11": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "component": {"package": "RES-0603", "value": "10K 1%"}, "size": 23, "id": "StripFeeder_11", "point": {"y": 158, "x": 347.5, "z": 31}, "type": "StripFeeder"}, "12": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "LED-0603", "value": "OSG50603C1E"}, "size": 47, "id": "StripFeeder_12", "point": {"y": 169.4, "x": 251.8, "z": 31}, "type": "StripFeeder"}, "13": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "SOT-23", "value": "PDTC114ET"}, "size": 47, "id": "StripFeeder_13", "point": {"y": 181.4, "x": 251.8, "z": 31}, "type": "StripFeeder"}, "14": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "component": {"package": "RES-0603", "value": "0R 1%"}, "size": 23, "id": "StripFeeder_14", "point": {"y": 194, "x": 347.3, "z": 31}, "type": "StripFeeder"}, "15": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 23, "component": {"package": "RES-0603", "value": "150R 5%"}, "size": 23, "id": "StripFeeder_15", "point": {"y": 206, "x": 347.3, "z": 31}, "type": "StripFeeder"}, "16": {"code": "# get_point gets called before pick operation \n# and should return the next pick point\ndef get_point(point, count, size):\n    point['x'] += (size-count) * 3.98\n    return point", "count": 47, "component": {"package": "SOD-80", "value": "LL4148"}, "size": 47, "id": "StripFeeder_16", "point": {"y": 217.4, "x": 251.6, "z": 31}, "type": "StripFeeder"}}}